var1.id,
var2.id,
paste("cv=", required.common.vals.fraction, sep = ""),
paste("exp=", max.num.boxes.exponent, sep = ""),
paste("notify=", notify.wait, sep = ""),
paste("c=", num.clumps.factor, sep = ""),
paste("d=", debug.level, sep = ""),
paste("gc=", gc.wait, sep = ""),
paste("id=", job.id, sep = "")
))
}
params <- .jnew("main/JobParameters", args)
flush.console()
#confirm parameters for user
cat(params$toString())
cat("\n")
flush.console()
params
}
doAnalysis <- function (dataset, params) {
toAnalyze <- .jnew("analysis/VarPairQueue", dataset)
params$analysisStyle$addVarPairsTo(toAnalyze, dataset$numVariables())
a <- .jnew("analysis/Analysis", dataset, toAnalyze)
cat("Analyzing...\n")
flush.console()
while(! a$varPairQueue()$isEmpty()) {
# print a status update
statusUpdate <- paste(a$numResults() + 1, " calculating: ", a$varPairQueue()$peek()$var1$name(), " vs ", a$varPairQueue()$peek()$var2$name(), "...\n", sep="")
cat(statusUpdate)
flush.console()
# create a file containing the status update (for use when running on a cluster)
write(statusUpdate, file=params$statusFileName())
# analyze some more pairs
a$analyzePairs(J("analysis.results/BriefResult")$class,
params$analysisParams,
params$notifyWait)
}
cat(paste(a$numResults(), " variable pairs analyzed.\n", "Sorting results in descending order...\n", sep=""))
flush.console()
results <- a$getSortedResults()
cat("done. printing results\n")
flush.console()
#print the results
repeat {
if(J("main/Analyze")$printResults(results, params)) {
break
}
else {
n <- readline("writing results to output file failed. Perhaps it is locked in some way. Enter 1 to try again, 0 otherwise: ")
if(n == 0) break
}
}
cat("Analysis finished. See file \"")
cat(params$resultsFileName())
cat("\" for output\n")
}
WHO <- read.csv("D:/github/dataguru_learningR/homework/WHO.csv")
View(WHO)
??MINE
rMINE(WHO, trytry, "one.pair", 1, 2, jobid=1)
rMINE(WHO, trytry, "one.pair", 1, 2, job.id=1)
??readLines
path <- file.path("D:/github/2014_book_ML_for_Hackers/03-Classification/data/easy_ham")
readLines( path )
path <- file.path("D:/github/2014_book_ML_for_Hackers/03-Classification/data/easy_ham/")
readLines( path )
ham.docs <- dir(path)
list <- sapply( ( paste( path, ham.docs, sep="")), read.csv)
path <- file.path("D:/百度云同步盘/data/20130722 999salescv")
ham.docs <- dir(path)
list <- sapply( ( paste( path, ham.docs, sep="")), read.csv)
path <- file.path("D:/百度云同步盘/data/20130722 999salescv/")
ham.docs <- dir(path)
list <- sapply( ( paste( path, ham.docs, sep="")), read.csv)
list[[1]]
rm( ham.doc, list, path)
rm( ham.docs, list, path)
seq(3)
seq()
seq
??seq
seq(1,3,by=1)
rMINE(WHO, trytry, "one.pair", 1, 2, job.id=1)
MINE(WHO, trytry, "one.pair", 1, 2, job.id=1)
MINE("example.csv","all.pairs")
MINE(WHO, trytry, "one.pair", 1, 2, job.id=1)
library('ggplot2')
set.seed(1)
x <- seq(-10, 10, by = 0.01)
y <- 1 - x ^ 2 + rnorm(length(x), 0, 5)
ggplot(data.frame(X = x, Y = y), aes(x = X, y = Y)) +
geom_point() +
geom_smooth(se = FALSE)
x.squared <- x ^ 2
ggplot(data.frame(XSquared = x.squared, Y = y), aes(x = XSquared, y = Y)) +
geom_point() +
geom_smooth(method = 'lm', se = FALSE)
summary(lm(y ~ x))$r.squared
summary(lm(y ~ x.squared))$r.squared
summary(lm(y ~ x))$r.squared
summary(lm(y ~ x.squared))$r.squared
set.seed(1)
x <- seq(0, 1, by = 0.01)
y <- sin(2 * pi * x) + rnorm(length(x), 0, 0.1)
df <- data.frame(X = x, Y = y)
ggplot(df, aes(x = X, y = Y)) +
geom_point()
summary(lm(Y ~ X, data = df))
ggplot(data.frame(X = x, Y = y), aes(x = X, y = Y)) +
geom_point() +
geom_smooth(method = 'lm', se = FALSE)
df <- transform(df, X2 = X ^ 2)
df <- transform(df, X3 = X ^ 3)
summary(lm(Y ~ X + X2 + X3, data = df))
df <- transform(df, X4 = X ^ 4)
df <- transform(df, X5 = X ^ 5)
df <- transform(df, X6 = X ^ 6)
df <- transform(df, X7 = X ^ 7)
df <- transform(df, X8 = X ^ 8)
df <- transform(df, X9 = X ^ 9)
df <- transform(df, X10 = X ^ 10)
df <- transform(df, X11 = X ^ 11)
df <- transform(df, X12 = X ^ 12)
df <- transform(df, X13 = X ^ 13)
df <- transform(df, X14 = X ^ 14)
df <- transform(df, X15 = X ^ 15)
summary(lm(Y ~ X + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X11 + X12 + X13 + X14,
data = df))
summary(lm(Y ~ poly(X, degree = 14), data = df))
poly.fit <- lm(Y ~ poly(X, degree = 1), data = df)
df <- transform(df, PredictedY = predict(poly.fit))
ggplot(df, aes(x = X, y = PredictedY)) +
geom_point() +
geom_line()
poly.fit <- lm(Y ~ poly(X, degree = 3), data = df)
df <- transform(df, PredictedY = predict(poly.fit))
ggplot(df, aes(x = X, y = PredictedY)) +
geom_point() +
geom_line()
poly.fit <- lm(Y ~ poly(X, degree = 5), data = df)
df <- transform(df, PredictedY = predict(poly.fit))
ggplot(df, aes(x = X, y = PredictedY)) +
geom_point() +
geom_line()
poly.fit <- lm(Y ~ poly(X, degree = 25), data = df)
df <- transform(df, PredictedY = predict(poly.fit))
ggplot(df, aes(x = X, y = PredictedY)) +
geom_point() +
geom_line()
# Twelfth code snippet
set.seed(1)
x <- seq(0, 1, by = 0.01)
y <- sin(2 * pi * x) + rnorm(length(x), 0, 0.1)
# Thirteenth code snippet
n <- length(x)
indices <- sort(sample(1:n, round(0.5 * n)))
training.x <- x[indices]
training.y <- y[indices]
test.x <- x[-indices]
test.y <- y[-indices]
training.df <- data.frame(X = training.x, Y = training.y)
test.df <- data.frame(X = test.x, Y = test.y)
# Fourteenth code snippet
rmse <- function(y, h)
{
return(sqrt(mean((y - h) ^ 2)))
}
# Fifteenth code snippet
performance <- data.frame()
for (d in 1:12)
{
poly.fit <- lm(Y ~ poly(X, degree = d), data = training.df)
performance <- rbind(performance,
data.frame(Degree = d,
Data = 'Training',
RMSE = rmse(training.y, predict(poly.fit))))
performance <- rbind(performance,
data.frame(Degree = d,
Data = 'Test',
RMSE = rmse(test.y, predict(poly.fit,
newdata = test.df))))
}
ggplot(performance, aes(x = Degree, y = RMSE, linetype = Data)) +
geom_point() +
geom_line()
# Seventeenth code snippet
lm.fit <- lm(y ~ x)
model.complexity <- sum(coef(lm.fit) ^ 2)
# Eighteenth code snippet
lm.fit <- lm(y ~ x)
l2.model.complexity <- sum(coef(lm.fit) ^ 2)
l1.model.complexity <- sum(abs(coef(lm.fit)))
# Ninteenth code snippet
set.seed(1)
x <- seq(0, 1, by = 0.01)
y <- sin(2 * pi * x) + rnorm(length(x), 0, 0.1)
# Twentieth code snippet
x <- as.matrix(cbind(x,rev(x)))
library('glmnet')
install.packages("glmnet")
library('glmnet')
glmnet(x, y)
set.seed(1)
x <- seq(0, 1, by = 0.01)
y <- sin(2 * pi * x) + rnorm(length(x), 0, 0.1)
n <- length(x)
indices <- sort(sample(1:n, round(0.5 * n)))
training.x <- x[indices]
training.y <- y[indices]
test.x <- x[-indices]
test.y <- y[-indices]
df <- data.frame(X = x, Y = y)
training.df <- data.frame(X = training.x, Y = training.y)
test.df <- data.frame(X = test.x, Y = test.y)
rmse <- function(y, h)
{
return(sqrt(mean((y - h) ^ 2)))
}
# Twenty-second code snippet
library('glmnet')
glmnet.fit <- with(training.df, glmnet(poly(X, degree = 10), Y))
lambdas <- glmnet.fit$lambda
performance <- data.frame()
for (lambda in lambdas)
{
performance <- rbind(performance,
data.frame(Lambda = lambda,
RMSE = rmse(test.y,
with(test.df,
predict(glmnet.fit,
poly(X, degree = 10),
s = lambda)))))
}
# Twenty-third code snippet
ggplot(performance, aes(x = Lambda, y = RMSE)) +
geom_point() +
geom_line()
# Alternative plot not shown in the book.
ggplot(performance, aes(x = Lambda, y = RMSE)) +
geom_point() +
geom_line() +
scale_x_log10()
# Twenty-fourth code snippet
best.lambda <- with(performance, Lambda[which(RMSE == min(RMSE))])
setwd("D:/github/2014_ali_bigdata")
odata <- read.csv("t_alibaba_data.csv")
names(odata)
summary(odata$type)
table(odata$type)
??as.factor
odata$type <- factor( odata$type, levels=c(0,1,2,3), labels=c("click","buy","store" ,"cart") )
table(odata$type)
library(sqldf)
names(odata)
brand.sum <- sqldf( "select brand_id, count(user_id) as n from odata where type=1 group by brand_id")
View(brand.sum)
names(odata)
brand.sum <- sqldf( "select brand_id, count(user_id) as n from odata where type='buy' group by brand_id")
View(brand.sum)
brand.sum <- sqldf( "select brand_id, count(user_id) as n
from odata where type='buy' group by brand_id
having max( count(user_id)) ")
brand.sum <- sqldf( "select brand_id, max( count(user_id)) as n
from odata where type='buy' group by brand_id ")
View(brand.sum)
sqldf("select * from brand.sum")
brandsum <- sqldf( "select brand_id, count(user_id) as n
from odata where type='buy' group by brand_id ")
rm(brandsum)
sqldf("select brand_id, max(n) from brandsum")
brandsum <- sqldf( "select brand_id, count(user_id) as n
from odata where type='buy' group by brand_id ")
rm(brand.sum)
sqldf("select brand_id, max(n) from brandsum")
buyerbrandi <- sqldf( "select * from odata where brand_id=7868")
View(buyerbrandi)
View(buyerbrandi)
View(buyerbrandi)
dcast( buyerbrandi, user_id~type, fun=length)
library(reshape2)
dcast( buyerbrandi, user_id~type, fun=length)
table(buyerbrandi$type)
View(buyerbrandi)
buyerbrandi <- sqldf( "select * from odata where brand_id=7868 and type='buy'")
table(buyerbrandi$type)
View(buyerbrandi)
buyerbrandi <- sqldf( "select * from odata where (
select user_id from odata where brand_id=7868 and type='buy') ")
buyerbrandi <- sqldf( "select * from odata where user_id=(
select user_id from odata where brand_id=7868 and type='buy') ")
View(buyerbrandi)
table(buyerbrandi$type)
View(buyerbrandi)
buyerbrandi <- sqldf( "select * from odata where user_id in (
select user_id from odata where brand_id=7868 and type='buy') ")
table(buyerbrandi$type)
View(buyerbrandi)
table(buyerbrandi$type)
library(reshape2)
dcast( buyerbrandi, user_id~type, fun=length)
buyerbrandi <- dcast( buyerbrandi, user_id~type, fun=length)
View(brandsum)
View(buyerbrandi)
buyerbrandi <- sqldf( "select * from odata where user_id in (
select user_id from odata where brand_id=7868') ")
buyerbrandi <- sqldf( "select * from odata where user_id in (
select user_id from odata where brand_id=7868') ")
buyerbrandi <- sqldf( "select * from odata where user_id in (
select user_id from odata where brand_id=7868') ")
library(sqldf)
buyerbrandi <- sqldf( "select * from odata where user_id in (
select user_id from odata where brand_id=7868') ")
buyerbrandi <- sqldf( "select * from odata where user_id in (
select user_id from odata where brand_id=7868')")
rm(buyerbrandi)
buyerbrandi <- sqldf( "select * from odata where user_id in (
select user_id from odata where brand_id=7868')")
buyerbrandi <- sqldf( "select * from odata where user_id in (
select user_id from odata where brand_id=7868)")
table(buyerbrandi$type)
buyerbrandi <- dcast( buyerbrandi, user_id~type, fun=length)
View(buyerbrandi)
View(buyerbrandi)
summary(buyerbrandidi$buy)
summary(buyerbrandi$buy)
plot(buyerbrandi$buy)
View(buyerbrandi)
plot(buyerbrandi$buy, buyerbrandi$click)
View(buyerbrandi)
View(buyerbrandi)
pairs( ~ click + buy + store +cart, data=buyerbrandi)
pairs( ~ buy + click + store +cart, data=buyerbrandi)
active <- dcast( odata, user_id~type, fun=length)
rm(brandsum,buyerbrandi)
pairs( ~ buy + click + store +cart, data=buyerbrandi)
pairs( ~ buy + click + store +cart, data=active)
pairs( ~ buy + click + store +cart, data=active)
cor( active$buy, active$click)
cor.test( active$buy, active$click)
cor.test( active)
cor( active)
cor( active[,-1])
cor.test( active[,-1])
cor.test( active$buy, active$sort)
View(active)
cor.test( active$buy, active$cart)
cor.test( active$buy, active$click)
View(active)
View(odata)
View(odata)
class(odata$visit_datetime)
View(odata)
time <- as.Date( odata$visit_datetime, "%m-%d" )
time <- as.Date(  gsub( "[^0-9]", "" ,  odata$visit_datetime ) , "%m-%d" )
gsub( "[^0-9]", "" ,  odata$visit_datetime )
gsub( "月", "-" ,  odata$visit_datetime )
time <- gsub( "月", "-" ,  odata$visit_datetime )
time <- gsub( "日", "" ,  time )
time <- as.Date(  time, "%m-%d" )
head(time);head(odata$visit_datetime)
time[100:120];odata$visit_datetime[100:120]
odata$visit_datetime <- gsub( "月", "-" ,  odata$visit_datetime )
odata$visit_datetime <- gsub( "日", "" ,  odata$visit_datetime  )
odata$visit_datetime <- as.Date(  odata$visit_datetime , "%m-%d" )
View(odata)
summary(odata)
library(arules)
data(Groceries)
df.gro = as( Groceries, "data.frame")
View(df.gro)
test.Groceries = as( df.gro, "transactions")
rules <- apriori( Groceris, parameter = list( support =0.01, confidence=0.2))
rules <- apriori( Groceries, parameter = list( support =0.01, confidence=0.2))
inspect( sort(rules, by ="support") [1:6])
inspect( sort(rules, by = "confidence")[1:6])
sets <- eclat( Groceries, parameter = list(support = 0.05, maxlen =10))
sub.rules <- subset( rules, subset = rhs %in% "whole milk" & lift > 1.2)
itemFrequencyPlot( Groceries, support = 0.05, cex.names = 0.8)
View(df.gro)
df.rules <- as(rules, "data.frame")
View(df.rules)
class(test.Groceries)
head(Groceries)
??apriori
odata <- read.csv("t_alibaba_data.csv")
odata$type <- factor( odata$type, levels=c(0,1,2,3), labels=c("click","buy","store" ,"cart") )
odata$visit_datetime <- gsub( "月", "-" ,  odata$visit_datetime )
odata$visit_datetime <- gsub( "日", "" ,  odata$visit_datetime  )
odata$visit_datetime <- as.Date(  odata$visit_datetime , "%m-%d" )
active <- dcast( odata, user_id~type, fun=length)
View(active)
tran <- dcast( odata[1:100,], user_id~type, fun=length)
View(tran)
View(tran)
View(tran)
unstack( odata[1:100] , user_id ~ type)
View(odata)
unstack( odata[1:100,] , user_id ~ type)
unstack( odata[1:100,] , type ~ user_id)
stack( odata[1:100,] , type ~ user_id)
View(odata)
View(odata)
test <- odata[ 1:200, c(1,3)]
View(test)
unstack( test, user_id ~ type)
dcast( test, user_id ~ type)
cast(test, user_id ~)
test
cast(test, user_id ~ type)
dcast(test, user_id ~ type)
dcast(test, user_id ~ )
dcast(test, user_id )
test
t(test[,2])
paste(test[,2], sep=",")
paste(test[,2])
paste(test[,2] , collapse = ",")
data( Groceries)
str(Groceries)
Groceries[1]
Groceries[1,]
??transpos
pairs( ~ buy + click + store +cart, data=active)
View(active)
hist( active$buy )
hist( active$buy )
hist( active$buy, freq=F )
boxplot( active$buy )
summary( active$buy )
summary( active$buy[which(active$buy)!=0] )
active$buy[which(active$buy)!=0]
summary( active$buy[active$buy!=0] )
active <- within( active, {
user_g[ buy =0 ] <- 0
user_g[ buy >0 & buy <= 3] <- 1
user_g[ buy >3 & buy <= 7] <- 2
user_g[ buy >7 & buy <= 12] <- 3
user_g[ buy >12 ] <- 4
})
active <- within( active, {
user_g <- 0
user_g[ buy >0 & buy <= 3] <- 1
user_g[ buy >3 & buy <= 7] <- 2
user_g[ buy >7 & buy <= 12] <- 3
user_g[ buy >12 ] <- 4 })
View(active)
active <- within( active, {
user_g[ buy ==0 ] <- 0
user_g[ buy >0 & buy <= 3] <- 1
user_g[ buy >3 & buy <= 7] <- 2
user_g[ buy >7 & buy <= 12] <- 3
user_g[ buy >12 ] <- 4 })
View(active)
summary( active$buy[active$buy!=0] )
boxplot( active$buy[active$buy!=0] )
boxplot( active$buy[active$buy!=0] )
barplot( active$user_g)
barplot( table(active$user_g))
barplot( table(active$user_g) , xlabs=c("a"  ))
summary( active$buy[active$buy!=0] )
barplot( table(active$user_g) , xlab=c("0","1-3","3-7","7-12","12+"  ))
barplot( table(active$user_g) , xaxt="n", xlab=c("0","1-3","3-7","7-12","12+"))
active$user_g <- as.factor( active$user_g , labels= c("0","1-3","3-7","7-12","12+") )
active$user_g <- factor( active$user_g , labels= c("0","1-3","3-7","7-12","12+") )
barplot( table(active$user_g) )
barplot( table(active$user_g), ylim=c(0,200) )
barplot( table(active$user_g), ylim=c(0,400) )
barplot( table(active$user_g), ylim=c(0,300) )
active$user_g <- factor( active$user_g , labels= c("0","1-3","3-7","7-12","12+"), width = 0.8)
barplot( table(active$user_g), ylim=c(0,300) , width = 0.8)
barplot( table(active$user_g), ylim=c(0,300) , width = 0.5)
barplot( table(active$user_g), ylim=c(0,300) , width = 0.0001)
barplot( table(active$user_g), ylim=c(0,300) , width = 10)
grid()
barplot( table(active$user_g), ylim=c(0,300) , width = 5)
grid()
barplot( table(active$user_g), ylim=c(0,300))
grid()
barplot( table(active$user_g), ylim=c(0,300) , main="n of buyer group")
grid()
barplot( table(active$user_g), ylim=c(0,300) , main= "grouped buyer" ,
xlab=" items buy", ylab="n of user")
grid()
boxplot( active$click ~ active~user_g)
boxplot( active$click ~ active$user_g)
boxplot( active$click ~ active$user_g, xlab="buyer group" , ylab="times of click")
boxplot( active$store ~ active$user_g, xlab="buyer group" , ylab="times of store")
boxplot( active$cart ~ active$user_g, xlab="buyer group" , ylab="times of cart")
aov( buy ~ click + store + cart, data= active)
fit <- aov( buy ~ click + store + cart, data= active)
summary(fit)
fit <- aov( user_g ~ click + store + cart, data= active)
summary(fit)
fit <- aov( buy ~ click + store + cart, data= active)
summary(fit)
fit <- aov( buy ~ click *store + cart, data= active)
summary(fit)
fit <- aov( buy ~ click + store * cart, data= active)
summary(fit)
fit <- aov( buy ~ click* cart + store , data= active)
summary(fit)
fit <- aov( buy ~ click* cart , data= active)
summary(fit)
install.packages("HH")
library(HH)
ancova( buy ~ click* cart , data= active)
ancova( buy ~ click+ cart , data= active)
lm( buy ~ click + cart, data= active)
fit <- lm( buy ~ click + cart, data= active)
summary(fit)
fit <- lm( buy ~ click + click* cart, data= active)
summary(fit)
