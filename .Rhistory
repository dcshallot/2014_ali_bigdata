}
###########################################
# rMINE - runs MINE on an R matrix.
#  all parameters are as in MINE, except
#  that the name of the results file will
#  begin with output.prefix rather than
#  the name of the input file (since there
#  is no input file).
#
#  MINE assumes that each row of the
#  supplied matrix is a variable, and each
#  column is a record.
#
# EXAMPLE:
#  rMINE(matrix(1:10,2),"matrix",0)
#   will run MINE on matrix(1:10,2),
#   assuming that each of the two rows
#   in the matrix is a variable.
###########################################
rMINE <- function (
data,
output.prefix,
style=c("master.variable", "all.pairs", "adjacent.pairs", "pairs.between", "one.pair"),
var1.id=NA,
var2.id=NA,
required.common.vals.fraction=0,
max.num.boxes.exponent=0.6,
notify.wait=100,
num.clumps.factor=15,
debug.level=0,
gc.wait=Inf,
job.id
) {
printHeader()
if(missing(output.prefix))
stop("you must specify output.prefix so that I'll know what to name the output file!")
params <- getParams(output.prefix, style, var1.id, var2.id, required.common.vals.fraction, max.num.boxes.exponent, notify.wait, num.clumps.factor, debug.level, gc.wait, job.id)
# run the analysis
cat("reading in dataset...\n")
flush.console()
data <- .jarray(data, dispatch=TRUE)
dataset <- .jnew("data/Dataset",
data, params$analysisParams$mineParams$debug)
cat("done.\n")
flush.console()
doAnalysis(dataset, params)
}
printHeader <- function () {
# print header
cat(J("main/Analyze")$header())
cat("\n\n")
flush.console()
}
getParams <- function(
input.filename,
style=c("master.variable", "all.pairs", "adjacent.pairs", "pairs.between", "one.pair"),
var1.id=NA,
var2.id=NA,
required.common.vals.fraction=0,
max.num.boxes.exponent=0.6,
notify.wait=100,
num.clumps.factor=15,
debug.level=0,
gc.wait=Inf,
job.id
) {
if (gc.wait==Inf) gc.wait <- J("java.lang.Integer")$MAX_VALUE
else gc.wait <- as.integer(gc.wait)
# create parameters object
if(missing(job.id)) {
args <- .jarray(c(
input.filename,
style,
var1.id,
var2.id,
paste("cv=", required.common.vals.fraction, sep = ""),
paste("exp=", max.num.boxes.exponent, sep = ""),
paste("notify=", notify.wait, sep = ""),
paste("c=", num.clumps.factor, sep = ""),
paste("d=", debug.level, sep = ""),
paste("gc=", gc.wait, sep = "")
))
} else {
args <- .jarray(c(
input.filename,
style,
var1.id,
var2.id,
paste("cv=", required.common.vals.fraction, sep = ""),
paste("exp=", max.num.boxes.exponent, sep = ""),
paste("notify=", notify.wait, sep = ""),
paste("c=", num.clumps.factor, sep = ""),
paste("d=", debug.level, sep = ""),
paste("gc=", gc.wait, sep = ""),
paste("id=", job.id, sep = "")
))
}
params <- .jnew("main/JobParameters", args)
flush.console()
#confirm parameters for user
cat(params$toString())
cat("\n")
flush.console()
params
}
doAnalysis <- function (dataset, params) {
toAnalyze <- .jnew("analysis/VarPairQueue", dataset)
params$analysisStyle$addVarPairsTo(toAnalyze, dataset$numVariables())
a <- .jnew("analysis/Analysis", dataset, toAnalyze)
cat("Analyzing...\n")
flush.console()
while(! a$varPairQueue()$isEmpty()) {
# print a status update
statusUpdate <- paste(a$numResults() + 1, " calculating: ", a$varPairQueue()$peek()$var1$name(), " vs ", a$varPairQueue()$peek()$var2$name(), "...\n", sep="")
cat(statusUpdate)
flush.console()
# create a file containing the status update (for use when running on a cluster)
write(statusUpdate, file=params$statusFileName())
# analyze some more pairs
a$analyzePairs(J("analysis.results/BriefResult")$class,
params$analysisParams,
params$notifyWait)
}
cat(paste(a$numResults(), " variable pairs analyzed.\n", "Sorting results in descending order...\n", sep=""))
flush.console()
results <- a$getSortedResults()
cat("done. printing results\n")
flush.console()
#print the results
repeat {
if(J("main/Analyze")$printResults(results, params)) {
break
}
else {
n <- readline("writing results to output file failed. Perhaps it is locked in some way. Enter 1 to try again, 0 otherwise: ")
if(n == 0) break
}
}
cat("Analysis finished. See file \"")
cat(params$resultsFileName())
cat("\" for output\n")
}
WHO <- read.csv("D:/github/dataguru_learningR/homework/WHO.csv")
View(WHO)
??MINE
rMINE(WHO, trytry, "one.pair", 1, 2, jobid=1)
rMINE(WHO, trytry, "one.pair", 1, 2, job.id=1)
??readLines
path <- file.path("D:/github/2014_book_ML_for_Hackers/03-Classification/data/easy_ham")
readLines( path )
path <- file.path("D:/github/2014_book_ML_for_Hackers/03-Classification/data/easy_ham/")
readLines( path )
ham.docs <- dir(path)
list <- sapply( ( paste( path, ham.docs, sep="")), read.csv)
path <- file.path("D:/百度云同步盘/data/20130722 999salescv")
ham.docs <- dir(path)
list <- sapply( ( paste( path, ham.docs, sep="")), read.csv)
path <- file.path("D:/百度云同步盘/data/20130722 999salescv/")
ham.docs <- dir(path)
list <- sapply( ( paste( path, ham.docs, sep="")), read.csv)
list[[1]]
rm( ham.doc, list, path)
rm( ham.docs, list, path)
seq(3)
seq()
seq
??seq
seq(1,3,by=1)
rMINE(WHO, trytry, "one.pair", 1, 2, job.id=1)
MINE(WHO, trytry, "one.pair", 1, 2, job.id=1)
MINE("example.csv","all.pairs")
MINE(WHO, trytry, "one.pair", 1, 2, job.id=1)
library('ggplot2')
set.seed(1)
x <- seq(-10, 10, by = 0.01)
y <- 1 - x ^ 2 + rnorm(length(x), 0, 5)
ggplot(data.frame(X = x, Y = y), aes(x = X, y = Y)) +
geom_point() +
geom_smooth(se = FALSE)
x.squared <- x ^ 2
ggplot(data.frame(XSquared = x.squared, Y = y), aes(x = XSquared, y = Y)) +
geom_point() +
geom_smooth(method = 'lm', se = FALSE)
summary(lm(y ~ x))$r.squared
summary(lm(y ~ x.squared))$r.squared
summary(lm(y ~ x))$r.squared
summary(lm(y ~ x.squared))$r.squared
set.seed(1)
x <- seq(0, 1, by = 0.01)
y <- sin(2 * pi * x) + rnorm(length(x), 0, 0.1)
df <- data.frame(X = x, Y = y)
ggplot(df, aes(x = X, y = Y)) +
geom_point()
summary(lm(Y ~ X, data = df))
ggplot(data.frame(X = x, Y = y), aes(x = X, y = Y)) +
geom_point() +
geom_smooth(method = 'lm', se = FALSE)
df <- transform(df, X2 = X ^ 2)
df <- transform(df, X3 = X ^ 3)
summary(lm(Y ~ X + X2 + X3, data = df))
df <- transform(df, X4 = X ^ 4)
df <- transform(df, X5 = X ^ 5)
df <- transform(df, X6 = X ^ 6)
df <- transform(df, X7 = X ^ 7)
df <- transform(df, X8 = X ^ 8)
df <- transform(df, X9 = X ^ 9)
df <- transform(df, X10 = X ^ 10)
df <- transform(df, X11 = X ^ 11)
df <- transform(df, X12 = X ^ 12)
df <- transform(df, X13 = X ^ 13)
df <- transform(df, X14 = X ^ 14)
df <- transform(df, X15 = X ^ 15)
summary(lm(Y ~ X + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X11 + X12 + X13 + X14,
data = df))
summary(lm(Y ~ poly(X, degree = 14), data = df))
poly.fit <- lm(Y ~ poly(X, degree = 1), data = df)
df <- transform(df, PredictedY = predict(poly.fit))
ggplot(df, aes(x = X, y = PredictedY)) +
geom_point() +
geom_line()
poly.fit <- lm(Y ~ poly(X, degree = 3), data = df)
df <- transform(df, PredictedY = predict(poly.fit))
ggplot(df, aes(x = X, y = PredictedY)) +
geom_point() +
geom_line()
poly.fit <- lm(Y ~ poly(X, degree = 5), data = df)
df <- transform(df, PredictedY = predict(poly.fit))
ggplot(df, aes(x = X, y = PredictedY)) +
geom_point() +
geom_line()
poly.fit <- lm(Y ~ poly(X, degree = 25), data = df)
df <- transform(df, PredictedY = predict(poly.fit))
ggplot(df, aes(x = X, y = PredictedY)) +
geom_point() +
geom_line()
# Twelfth code snippet
set.seed(1)
x <- seq(0, 1, by = 0.01)
y <- sin(2 * pi * x) + rnorm(length(x), 0, 0.1)
# Thirteenth code snippet
n <- length(x)
indices <- sort(sample(1:n, round(0.5 * n)))
training.x <- x[indices]
training.y <- y[indices]
test.x <- x[-indices]
test.y <- y[-indices]
training.df <- data.frame(X = training.x, Y = training.y)
test.df <- data.frame(X = test.x, Y = test.y)
# Fourteenth code snippet
rmse <- function(y, h)
{
return(sqrt(mean((y - h) ^ 2)))
}
# Fifteenth code snippet
performance <- data.frame()
for (d in 1:12)
{
poly.fit <- lm(Y ~ poly(X, degree = d), data = training.df)
performance <- rbind(performance,
data.frame(Degree = d,
Data = 'Training',
RMSE = rmse(training.y, predict(poly.fit))))
performance <- rbind(performance,
data.frame(Degree = d,
Data = 'Test',
RMSE = rmse(test.y, predict(poly.fit,
newdata = test.df))))
}
ggplot(performance, aes(x = Degree, y = RMSE, linetype = Data)) +
geom_point() +
geom_line()
# Seventeenth code snippet
lm.fit <- lm(y ~ x)
model.complexity <- sum(coef(lm.fit) ^ 2)
# Eighteenth code snippet
lm.fit <- lm(y ~ x)
l2.model.complexity <- sum(coef(lm.fit) ^ 2)
l1.model.complexity <- sum(abs(coef(lm.fit)))
# Ninteenth code snippet
set.seed(1)
x <- seq(0, 1, by = 0.01)
y <- sin(2 * pi * x) + rnorm(length(x), 0, 0.1)
# Twentieth code snippet
x <- as.matrix(cbind(x,rev(x)))
library('glmnet')
install.packages("glmnet")
library('glmnet')
glmnet(x, y)
set.seed(1)
x <- seq(0, 1, by = 0.01)
y <- sin(2 * pi * x) + rnorm(length(x), 0, 0.1)
n <- length(x)
indices <- sort(sample(1:n, round(0.5 * n)))
training.x <- x[indices]
training.y <- y[indices]
test.x <- x[-indices]
test.y <- y[-indices]
df <- data.frame(X = x, Y = y)
training.df <- data.frame(X = training.x, Y = training.y)
test.df <- data.frame(X = test.x, Y = test.y)
rmse <- function(y, h)
{
return(sqrt(mean((y - h) ^ 2)))
}
# Twenty-second code snippet
library('glmnet')
glmnet.fit <- with(training.df, glmnet(poly(X, degree = 10), Y))
lambdas <- glmnet.fit$lambda
performance <- data.frame()
for (lambda in lambdas)
{
performance <- rbind(performance,
data.frame(Lambda = lambda,
RMSE = rmse(test.y,
with(test.df,
predict(glmnet.fit,
poly(X, degree = 10),
s = lambda)))))
}
# Twenty-third code snippet
ggplot(performance, aes(x = Lambda, y = RMSE)) +
geom_point() +
geom_line()
# Alternative plot not shown in the book.
ggplot(performance, aes(x = Lambda, y = RMSE)) +
geom_point() +
geom_line() +
scale_x_log10()
# Twenty-fourth code snippet
best.lambda <- with(performance, Lambda[which(RMSE == min(RMSE))])
setwd("D:/github/2014_ali_bigdata_git")
odata <- read.csv("t_alibaba_data.csv")
names(odata)
odata$type <- factor( odata$type, levels=c(0,1,2,3), labels=c("click","buy","store" ,"cart") )
odata$visit_datetime <- gsub( "月", "-" ,  odata$visit_datetime )
odata$visit_datetime <- gsub( "日", "" ,  odata$visit_datetime  )
odata$visit_datetime <- as.Date(  odata$visit_datetime , "%m-%d" )
summary(odata)
act1b <- dcast( odata, user_id + brand_id ~type + visit_datetime, fun=length)
library(reshape2)
act1b <- dcast( odata, user_id + brand_id ~type + visit_datetime, fun=length)
head(act1b)
head(act1b[1,])
library(sqldf)
summary(odata)
act1b <- sqldf( "select user_id, brand_id, type from odata where type='buy'
group by user_id, brand_d having min(visit_datetime) ")
act1b <- sqldf( "select user_id, brand_id, type from odata where type='buy'
group by user_id, brand_id having min(visit_datetime) ")
View(act1b)
act1b <- sqldf( "select user_id, brand_id, visit_datetime as b1date from odata where type='buy'
group by user_id, brand_id having min(visit_datetime) ")
View(act1b)
View(act1b)
a <- sqldf(" select user_id, brand_id, min(visit_datetime), type from odata")
View(a)
a <- sqldf(" select user_id, brand_id, min(visit_datetime), type from odata
gourp by user_id, brand_id")
a <- sqldf(" select user_id, brand_id, min(visit_datetime), type from odata
group by user_id, brand_id")
View(a)
View(a)
act1b <- sqldf( "select user_id, brand_id, visit_datetime as bdate from odata where type='buy'
group by user_id, brand_id having min(visit_datetime) ")
a <- sqldf(" select user_id, brand_id, min(visit_datetime) as fdate, type as fact from odata
group by user_id, brand_id")
View(a)
aa <- sqldf(" select user_id, brand_id, min(visit_datetime) as fdate, type as fact from odata
group by user_id, brand_id")
rm(a)
act1c <- sqldf( " select a.* , b.fdate, b.fact from act1b as a left join aa as b
on a.user_id=b.user_id, a.brand_id=b.brandid")
act1c <- sqldf( " select a.* , b.fdate, b.fact from act1b as a left join aa as b
on a.user_id=b.user_id and a.brand_id=b.brandid")
act1c <- sqldf( " select a.* , b.fdate, b.fact from act1b as a left join aa as b
on a.user_id=b.user_id and a.brand_id=b.brand_id")
View(act1c)
View(act1c)
act1d <- sqldf( " select b.user_id, b.brand_id, count( b.click) as clikcs
from act1c as a left join odata as b
on a.user_id=b.user_id and a.brand_id=b.brand_d and a.bdate>b.visit_datetime
where b.type='click' ")
act1d <- sqldf( " select b.user_id, b.brand_id, count( b.type) as clikcs
from act1c as a left join odata as b
on a.user_id=b.user_id and a.brand_id=b.brand_d and a.bdate>b.visit_datetime
where b.type='click' ")
act1d <- sqldf( " select b.user_id, b.brand_id, count( b.type) as clikcs
from act1c as a left join odata as b
on a.user_id=b.user_id and a.brand_id=b.brand_id and a.bdate>b.visit_datetime
where b.type='click' ")
View(act1d)
act1d <- sqldf( " select b.user_id, b.brand_id, count( b.type) as clikcs
from act1c as a left join odata as b
on a.user_id=b.user_id and a.brand_id=b.brand_id and a.bdate>b.visit_datetime
where b.type='click'  group by b.user_id, b.brand_id")
View(act1d)
act1d <- sqldf( " select b.user_id, b.brand_id, count( b.type) as clikcs
from act1c as a left join odata as b
on a.user_id=b.user_id and a.brand_id=b.brand_id and a.bdate>=b.visit_datetime
where b.type='click'  group by b.user_id, b.brand_id")
View(act1d)
act1d <- sqldf( " select a.*, count( b.type) as clikcs
from act1c as a left join odata as b
on a.user_id=b.user_id and a.brand_id=b.brand_id and a.bdate>=b.visit_datetime
where b.type='click'  group by b.user_id, b.brand_id")
View(act1d)
View(act1c)
act1d <- sqldf( " select a.*, count( b.type) as clikcs
from act1c as a left join odata as b
on a.user_id=b.user_id and a.brand_id=b.brand_id #and a.bdate>=b.visit_datetime
where b.type='click'  group by b.user_id, b.brand_id")
act1d <- sqldf( " select a.*, count( b.type) as clikcs
from act1c as a left join odata as b
on a.user_id=b.user_id and a.brand_id=b.brand_id
where b.type='click'  group by b.user_id, b.brand_id")
View(act1d)
act1d <- sqldf( " select a.*, count( b.type) as clikcs
from act1c as a left join odata as b
on a.user_id=b.user_id and a.brand_id=b.brand_id and a.bdate>=b.visit_datetime and b.type='click'
group by b.user_id, b.brand_id")
View(act1d)
act1d <- sqldf( " select a.*, count( b.type) as clikcs
from act1c as a left join odata as b
on a.user_id=b.user_id and a.brand_id=b.brand_id and a.bdate>=b.visit_datetime and b.type='click'
)
")
act1d <- sqldf( " select a.*, count( b.type) as clikcs
from act1c as a left join odata as b
on a.user_id=b.user_id and a.brand_id=b.brand_id and a.bdate>=b.visit_datetime and b.type='click'
")
View(act1d)
act1d <- sqldf( " select a.*, count( b.type) as clikcs
from act1c as a left join odata as b
on a.user_id=b.user_id and a.brand_id=b.brand_id and a.bdate>=b.visit_datetime and b.type='click'
group by a.user_id, a.brand_id")
View(act1d)
act1e <- sqldf( " select a.*, count( b.type) as carts
from act1d as a left join odata as b
on a.user_id=b.user_id and a.brand_id=b.brand_id and a.bdate>=b.visit_datetime and b.type='cart'
group by a.user_id, a.brand_id")
View(act1e)
summary(act1e$carts)
View(act1e)
table(odata$type)
act1e <- sqldf( " select a.*, count( b.type) as stores
from act1d as a left join odata as b
on a.user_id=b.user_id and a.brand_id=b.brand_id and a.bdate>=b.visit_datetime and b.type='store'
group by a.user_id, a.brand_id")
View(act1e)
act1f <- sqldf( " select a.*, count( b.type) as carts
from act1e as a left join odata as b
on a.user_id=b.user_id and a.brand_id=b.brand_id and a.bdate>=b.visit_datetime and b.type='cart'
group by a.user_id, a.brand_id")
View(act1f)
View(act1f)
View(act1f)
summary(act1f)
act1f$bdate <- as.Date(act1f$bdate)
class(act1f$bdate)
act1f$bdate <- as.Date(act1f$bdate, formate="&m-%d")
act1f$bdate <- as.Date(act1f$bdate,  "1970-01-01")
View(act1f)
act1f$bdate <- as.Date(act1f$bdate,  "1970-01-01" , format="%m-%d")
View(act1f)
View(act1f)
act1f$fdate <- as.Date(act1f$fdate,  "1970-01-01" )
summary(act1f)
hist(actf1$bdate)
hist(act1f$bdate)
plot(act1f$bdate)
barplot( table(act1f$bdate))
act2a <- act1f[ act1f$bdate > "2014-04-20" , ]
View(act2a)
act2a$duration <- act2a$bdate- act2a$fdate
hist(act2a$duration)
View(odata)
View(act2a)
act2a$duration <- as.numeric( act2a$bdate- act2a$fdate)
View(act2a)
hist(act2a$duration)
View(act2a)
sqldf("select * from odata where user_id=27520000 and brand_id=19405 ")
sqldf("select * from odata where user_id='27520000' and brand_id='19405' ")
odata[ which(odata$user_id==27520000),]
class(odata$user_id)
View(act2a)
sqldf("select * from odata where user_id='2752000' and brand_id='19405' ")
odata[ which(odata$user_id==2752000),]
odata[ which(odata$user_id==2752000 & odata$brand_id==19405,]
odata[ which(odata$user_id==2752000 & odata$brand_id==19405),]
odata[ which(odata$user_id==2088000 & odata$brand_id==21883),]
View(act2a)
odata[ which(odata$user_id==1189000 & odata$brand_id==21883),]
odata[ which(odata$user_id==1189000 ),]
plot(act2a$duration)
plot( sort(act2a$duration))
barplot( sort(act2a$duration))
hist( act2a$duration)
summary( act2a$duration )
hist( act2a$duration, xlab="days between first look and first buy", breaks=5 )
hist( act2a$duration, xlab="days between first look and first buy", break=100 )
??hist
hist( act2a$duration, xlab="days between look and buy", breaks=100 )
hist( act2a$duration, xlab="days between look and buy", breaks=50 )
hist( act2a$duration, xlab="days between look and buy", breaks=c(0,1,10,50,100) )
hist( act2a$duration, xlab="days between look and buy", breaks=c(0,1,10,50) )
hist( act2a$duration, xlab="days between look and buy", breaks=c(0,1,10,50,inf) )
hist( act2a$duration, xlab="days between look and buy", breaks=c(0,1,10,50) )
hist( act2a$duration, xlab="days between look and buy", breaks=c(0,1,10,500) )
hist( act2a$duration, xlab="days between look and buy", breaks=20 )
hist( act2a$duration, xlab="days between look and buy", breaks=50 )
summary( act2a$duration )
